;                                   D O O M
;%%%%%  %%%%%  %%%%  %%%%%% %%  %%   _---_   %%%  %%%  %%%%  %%%%%%  %%%% %%  %%
;%%  %% %%    %%  %%   %%   %%  %% ."     ". %%%%%%%% %%  %%   %%   %%    %%  %%
;%%  ## ####  ######   ##   ###%%% | () () | %% %# ## ######   ##   ##    ###%%%
;## ,## ##    ##  ##   ##   ## `##  \  A  /  ## #= ## ##  ##   ##   ##    ## `##
;####=  =###= =#  #=   =#   =#  ##  |"+++"|  ## =- #= =#  #=   =#    ###= =#  ##
;##=                            =#   "---"   #=                               =#
;                                 WAD RANKING

    .name "dwarf"
    .comment "
░░░░░▄▀▀▀▄░░░░░░░░░░░░░░░░░
▄███▀░◐░░░▌░░░░░░░░░░░░░░░░
░░░░▌░░░░░▐░░░░░░░░░░░░░░░░
░░░░▐░░░░░▐░░░░░░░░░░░░░░░░
░░░░▌░░░░░▐▄▄░░░░░░░░░░░░░░
░░░░▌░░░░▄▀▒▒▀▀▀▀▄░░░░░░░░░
░░░▐░░░░▐▒▒▒▒▒▒▒▒▀▀▄░░░░░░░
░░░▐░░░░▐▄▒▒▒▒▒▒▒▒▒▒▀▄░░░░░
░░░░▀▄░░░░▀▄▒▒▒▒▒▒▒▒▒▒▀▄░░░
░░░░░░▀▄▄▄▄▄█▄▄▄▄▄▄▄▄▄▄▄▀▄░
░░░░░░░░░░░▌▌░▌▌░░░░░░░░░░░
░░░░░░░░░░░▌▌░▌▌░░░░░░░░░░░
░░░░░░░░░▄▄▌▌▄▌▌░░░░░░░░░░░"

    ;; Specs:
    ;;   - Load offset in register 10 for padding
    ;;   - The program is divided in 0x04 parts
    ;;     - Each parts represent 4 bytes in the
    ;;       torpedo.
    ;;     - Using ldi and offset, we can apply severals
    ;;       parts in these dedicated bytes.
    ;;   - Once running last thread, we jump to 0x478,
    ;;     our symmetrical offset.
    ;;   - recurse, for fun and profit.

_stub:   #st     r1,6            ;.eh_frame_hdr
         live   %42
         ld     %480,r10        ; const offset
         fork   %:0x02          ; ──────╮
         fork   %:0x04          ; ──────│─╮
                                ;       │ │
0x01:    st     r1,90           ; ──────╯ │
         ldi    %:l1v3,%-3,r5   ; ──╮     │   ; -3
         and    r16,r16,r16     ;   │     │
         zjmp   %:l1v3          ;   │     │
                                ;   │     │
0x02:    fork   %:0x03          ; ──│─────│─╮
         ld     %4,r11          ;   │     │ │
         ldi    %:l1v3,%1,r5    ; ──│─╮   │ │ ; 0x01
         and    r16,r16,r16     ;   │ │   │ │
         zjmp   %:l1v3          ;   │ │   │ │
                                ;   │ │   │ │
0x03:    ld     %8,r11          ; ──│─│───│─╯
         ldi    %:l1v3,%5,r5    ; ──│─│─╮ │   ; 0x05
         and    r16,r16,r16     ;   │ │ │ │
         zjmp   %:l1v3          ;   │ │ │ │
                                ;   │ │ │ │
0x04:    ld     %12,r11         ; ──│─│─│─╯
         ldi    %:l1v3,%9,r5    ;   │ │ │     ; 0x09
         and    r16,r16,r16     ;   │ │ │
         zjmp   %:l1v3          ;   │ │ │
                                ;   │ │ │
l1v3:    live  %42              ; ──╯ │ │
         sti   r5,r10,r11       ; ────╯ │
         zjmp  %478             ; ──────╯
